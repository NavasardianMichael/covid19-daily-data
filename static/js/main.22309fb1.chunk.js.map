{"version":3,"sources":["redux/dataReducer.js","redux/rootReducer.js","redux/types.js","components/DataItem.js","components/Data.js","redux/actions.js","components/SearchArea.js","App.js","serviceWorker.js","index.js"],"names":["initialState","allData","rootReducer","combineReducers","data","state","action","type","DataItem","props","className","country","provinces","deaths","connect","dispatch","useDispatch","map","item","key","latitude","onClick","fetch","then","response","json","slice","setAllData","SearchArea","placeholder","App","Boolean","window","location","hostname","match","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2OAEMA,EAAe,CACpBC,QAAS,ICAH,IAAMC,EAAcC,YAAgB,CAC1CC,KDEM,WAAoD,IAA/BC,EAA8B,uDAAtBL,EAAcM,EAAQ,uCACzD,OAAQA,EAAOC,MACd,IER0B,oBFSzB,OAAO,2BAAIF,GAAX,IAAkBJ,QAASK,EAAOL,UACnC,QAAS,OAAOI,MGMHG,MAdf,SAAkBC,GACjB,OACC,yBAAKC,UAAU,kCACd,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcD,EAAME,QAAQA,SAC1C,wBAAID,UAAU,iCAAd,WAAuDD,EAAME,QAAQC,UAAU,GAAGC,QAFpF,MAGK,uBAAGH,UAAU,aAAb,sGCkBV,IAMeI,eANS,SAAAT,GACvB,MAAO,CACNJ,QAASI,EAAMD,KAAKH,WAIkB,KAAzBa,EA3Bf,SAAcL,GACb,IAAMM,EAAWC,cAMXZ,EAAOK,EAAMR,QAAQgB,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAUP,QAASO,EAAMC,IAAKD,EAAKE,cAE1E,OACC,yBAAKV,UAAU,QACd,4BAAQH,KAAK,SAASG,UAAU,iBAAiBW,QARnD,WACCN,GCAM,SAASA,GACd,IAAId,EAAU,GACdqB,MAAM,6GAA8G,CAClH,OAAU,MACV,QAAW,CACT,kBAAmB,+BACnB,iBAAkB,wDAGrBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAnB,GACLH,EAAUG,EAAKsB,MAAM,EAAG,IACxBX,EApBG,SAAoBd,GAC1B,MAAO,CACNM,KHJ0B,oBGK1BN,WAiBW0B,CAAW1B,YDLrB,iBACS,yBAAKS,UAAU,sBACd,yBAAKA,UAAU,WACbN,QELAwB,MAbf,WACC,OACC,yBAAKlB,UAAU,eACd,yBAAKA,UAAU,oBACb,2BAAOH,KAAK,OAAOG,UAAU,eAAemB,YAAY,kBACxD,yBAAKnB,UAAU,sBACb,4BAAQA,UAAU,yBAAyBH,KAAK,UAAhD,YCMQuB,MAVf,WACE,OACE,yBAAKpB,UAAU,aACb,wBAAIA,UAAU,oBAAd,sBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,YAAYnC,EAAaoC,YACtCC,YAAgBC,KAChBR,OAAOS,8BAAgCT,OAAOS,iCAEzCC,EACJ,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,OAGHJ,OAAOI,MAAQA,EACfO,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDgHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22309fb1.chunk.js","sourcesContent":["import { SET_ALL_DATA } from './types';\r\n\r\nconst initialState = {\r\n\tallData: []\r\n}\r\n\r\nexport function dataReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ALL_DATA:\r\n\t\t\treturn {...state, allData: action.allData}\r\n\t\tdefault: return state\r\n\t}\r\n};","import { combineReducers } from 'redux';\r\nimport {dataReducer} from './dataReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n\tdata: dataReducer\r\n})\r\n","export const SET_ALL_DATA = 'DATA/SET_ALL_DATA';","import React from 'react';\r\n\r\nfunction DataItem(props) {\r\n\treturn (\r\n\t\t<div className=\"col-lg-3 col-md-4 col-sm-6 p-0\">\r\n\t\t\t<div className=\"card\">\r\n\t\t\t  <div className=\"card-body\">\r\n\t\t\t    <h5 className=\"card-title\">{props.country.country}</h5>\r\n\t\t\t    <h6 className=\"card-subtitle mb-2 text-muted\">deaths: {props.country.provinces[0].deaths}</h6>\r\n\t\t\t    // <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t</div>\t\t\r\n\t)\r\n}\r\n\r\nexport default DataItem","import React from 'react';\r\nimport { useDispatch, useStore, connect } from 'react-redux';\r\n\r\nimport { fetchAllData } from '../redux/actions';\r\nimport DataItem from './DataItem';\r\n\r\nfunction Data(props) {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tfunction loadAllData() {\r\n\t\tdispatch(fetchAllData());\r\n\t};\r\n\r\n\tconst data = props.allData.map(item => <DataItem country={item} key={item.latitude} />)\r\n\t\r\n\treturn (\r\n\t\t<div className=\"data\">\r\n\t\t\t<button type=\"button\" className=\"btn btn-danger\" onClick={loadAllData}>Load All Data</button>\r\n            <div className=\"cards-section mt-4\">\r\n            \t<div className=\"row m-0\">\r\n            \t\t{data}\r\n            \t</div>\r\n            </div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tallData: state.data.allData\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Data)","import { SET_ALL_DATA } from './types';\r\n\r\nexport function setAllData(allData) {\r\n\treturn {\r\n\t\ttype: SET_ALL_DATA,\r\n\t\tallData\r\n\t}\r\n};\r\n\r\nexport function fetchAllData() {\r\n\treturn function(dispatch) {\r\n\t\t\tvar allData = [];\r\n\t\t\tfetch(\"https://covid-19-data.p.rapidapi.com/report/country/all?date-format=YYYY-MM-DD&format=json&date=2020-04-01\", {\r\n\t\t\t  \"method\": \"GET\",\r\n\t\t\t  \"headers\": {\r\n\t\t\t    \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\r\n\t\t\t    \"x-rapidapi-key\": \"7827889b5bmsh5d1ac9ac9c7b80bp1401dejsnfcde920261bb\"\r\n\t\t\t  }\r\n\t\t\t})\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tallData = data.slice(0, 10);\r\n\t\t\t\tdispatch(setAllData(allData));\r\n\t\t\t})\r\n\t}\r\n}","import React from 'react';\r\n\r\nfunction SearchArea() {\r\n\treturn (\r\n\t\t<div className=\"search-area\">\r\n\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t  <input type=\"text\" className=\"form-control\" placeholder=\"Manual search\"/>\r\n\t\t\t  <div className=\"input-group-append\">\r\n\t\t\t    <button className=\"btn btn-outline-danger\" type=\"button\">Find</button>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchArea","import React from 'react';\nimport Data from './components/Data';\nimport SearchArea from './components/SearchArea';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-center my-4\">COVID19 DAILY INFO</h1>\n      <SearchArea />\n      <Data />\n    </div>\n  );\n}\n\nexport default App;\n\n// fetch(\"https://covid-19-data.p.rapidapi.com/report/country/all?date-format=YYYY-MM-DD&format=json&date=2020-04-01\", {\n//   \"method\": \"GET\",\n//   \"headers\": {\n//     \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n//     \"x-rapidapi-key\": \"7827889b5bmsh5d1ac9ac9c7b80bp1401dejsnfcde920261bb\"\n//   }\n// })\n// .then(response => {\n//   console.log(response);\n// })\n// .catch(err => {\n//   console.log(err);\n// });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {rootReducer} from './redux/rootReducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, compose(\n\tapplyMiddleware(thunk),\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\nconst app = (\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n);\nwindow.store = store;\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}